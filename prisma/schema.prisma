// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  spaces        Space[]
  testimonials  Testimonial[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


model Space {
  id           String           @id @default(uuid())
  userId       String
  createdAt    DateTime      @default(now())
  description  String
  name         String        @unique
  updatedAt    DateTime      @default(now())
  message      String
  questions    Question[]
  user         User          @relation(fields: [userId], references: [id])
  testimonials Testimonial[]
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  content   String
  spaceId   String
  authorId  String
  name      String
  email     String
  liked     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  space     Space    @relation(fields: [spaceId], references: [id])
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  spaceId   String
  content   String[]
  space     Space    @relation(fields: [spaceId], references: [id])
}
